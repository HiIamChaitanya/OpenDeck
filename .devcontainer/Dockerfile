FROM ubuntu:23.10

ARG wget_args="-q --show-progress --progress=bar:force:noscroll"
ARG deps_dir=/opendeck-deps
ARG arduino_dir=${deps_dir}/arduino
ARG arduino_version=1.8.6
ARG user=ubuntu
ARG workspace_dir=/home/${user}/workspace
ARG project_name=OpenDeck
ARG project_dir=${workspace_dir}/${project_name}
ARG ccache_dir=${project_dir}/ccache

ENV CCACHE_DIR=${ccache_dir}
ENV WORKSPACE_DIR=${workspace_dir}

RUN \
apt-get update && \
DEBIAN_FRONTEND=noninteractive apt-get install --no-install-recommends -y \
alsa-utils \
avrdude \
bash-completion \
bsdmainutils \
bzip2 \
ca-certificates \
ccache \
clang \
clang-format \
clang-tidy \
cmake \
curl \
dfu-util \
g++ \
gcc \
gcc-arm-none-eabi \
gdb \
git \
git-lfs \
gpg-agent \
hub \
libgmock-dev \
libgoogle-glog-dev \
libgtest-dev \
libstdc++-arm-none-eabi-newlib \
lsb-release \
make \
nano \
ninja-build \
openssh-client \
python3-venv \
software-properties-common \
srecord \
sudo \
tzdata \
unzip \
wget \
xz-utils

RUN \
mkdir ${deps_dir}

RUN \
cd ${deps_dir} && \
curl -fsSL https://raw.githubusercontent.com/arduino/arduino-cli/master/install.sh | BINDIR=${deps_dir} sh && \
./arduino-cli config init && \
./arduino-cli config set directories.data ${arduino_dir} && \
./arduino-cli core install arduino:avr@${arduino_version}

RUN \
cd ${deps_dir} && \
ARCH="$(dpkg --print-architecture)" && \
if [ "$ARCH" = "amd64" ]; then \
PACKAGE_VARIANT="amd64"; \
elif [ "$ARCH" = "arm64" ] || [ "$ARCH" = "aarch64" ]; then \
PACKAGE_VARIANT="arm64"; \
else \
echo "Unsupported architecture"; false; \
fi \
&& \
echo "Downloading dasel for $PACKAGE_VARIANT arch" && \
wget ${wget_args} https://github.com/TomWright/dasel/releases/download/v1.27.3/dasel_linux_${PACKAGE_VARIANT} -O dasel && \
chmod +x dasel

RUN \
echo "PATH=${deps_dir}:$(dirname $(find "$(pwd)" -type f -name "*avr-g++")):${PATH}" | tee -a /etc/profile.d/opendeck-deps.sh

# Disable password prompt for sudo commands
RUN echo '%sudo ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers

# Run everything below as $user
USER ${user}
WORKDIR ${workspace_dir}

# Initialize the base projects/modules specified in west.yml when building the
# image not to do it every time the container is created.
# This is done with west init using -l flag which tells it to initialize
# workspace from local west.yml instead of from remote repository.
# This involves temporarily copying west.yml manifest file from the repository
# to the image during build, then running west init/update. Finally, make sure
# to set the correct west.yml paths in west config so that west update works
# once the repository is mounted to the container. Since the repository
# should be mounted under directory specified in project_dir variable,
# rename the path accordingly.

ADD west.yml ${workspace_dir}/west.yml

RUN \
python3 -m venv ${workspace_dir}/.venv && \
. ${workspace_dir}/.venv/bin/activate && \
pip install west && \
mkdir -p ${workspace_dir}/temp && \
cd ${workspace_dir}/temp && \
west init --mf ../west.yml -l . && \
west update && \
west config manifest.path ${project_name} && \
west config manifest.file west.yml && \
cd ${workspace_dir} && \
rm -rf temp west.yml

ADD .devcontainer/.git_branch_bash /home/${user}/.git_branch_bash

RUN tee -a /home/${user}/.bashrc <<EOF
alias mkc='make clean'
export MAKEFLAGS=-j$(nproc)
source ~/.git_branch_bash
source /etc/profile.d/opendeck-deps.sh
EOF